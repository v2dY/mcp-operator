name: Release

on:
  push:
    tags:
      - 'v*'  # Matches v0.0.0, v1.2.3, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/v2dy/mcp-operator

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Install tools and dependencies
      run: |
        # Install kubebuilder tools
        make kustomize controller-gen
        
        # Install helmify
        go install github.com/arttor/helmify/cmd/helmify@latest

    - name: Generate manifests
      run: |
        make manifests generate

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.13.0'

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build installer and generate Helm chart
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Building for version: $VERSION"
        
        # Build installer with the tagged image
        IMG=${{ env.IMAGE_NAME }}:$VERSION make build-installer
        
        # Generate Helm chart
        make helm
        
        # Verify Helm chart was generated
        if [ ! -f "helm/Chart.yaml" ]; then
          echo "Error: Helm chart generation failed"
          exit 1
        fi
        
        # Update Helm chart version and appVersion
        sed -i "s/version: .*/version: ${VERSION#v}/" helm/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"$VERSION\"/" helm/Chart.yaml
        
        # Update image tag in values.yaml
        sed -i "s/tag: latest/tag: \"$VERSION\"/" helm/values.yaml
        sed -i "s/tag: \"VERSION_PLACEHOLDER\"/tag: \"$VERSION\"/" helm/values.yaml

    - name: Package and push Helm chart
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Update chart name to be more descriptive
        sed -i "s/name: helm/name: mcp-operator/" helm/Chart.yaml
        sed -i "s/description: A Helm chart for Kubernetes/description: A Helm chart for MCP Operator/" helm/Chart.yaml
        
        # Package Helm chart locally with descriptive name
        helm package helm --destination ./dist
        
        # Rename the package to be more descriptive
        mv dist/mcp-operator-${VERSION#v}.tgz dist/helm-mcp-operator-${VERSION#v}.tgz
        
        # Verify package was created
        if [ ! -f "dist/helm-mcp-operator-${VERSION#v}.tgz" ]; then
          echo "Error: Helm package not found"
          ls -la dist/
          exit 1
        fi
        
        # Push Helm chart to ghcr.io as OCI artifact with helm prefix
        helm push dist/helm-mcp-operator-${VERSION#v}.tgz oci://${{ env.REGISTRY }}/v2dy/mcp-operator
        
        # Generate SHA256 checksum
        cd dist
        sha256sum *.tgz > checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/install.yaml
          dist/*.tgz
          dist/checksums.txt
        generate_release_notes: true
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}